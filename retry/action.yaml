# Ultralytics Actions ðŸš€, AGPL-3.0 License https://ultralytics.com/license

name: "Step-Level Retry"
description: "Retries a step while preserving its full context"
inputs:
  timeout_minutes:
    description: "Maximum time in minutes for each attempt"
    required: false
    default: "60"
  max_attempts:
    description: "Maximum number of retry attempts"
    required: false
    default: "3"
  retry_delay:
    description: "Delay between retries in seconds"
    required: false
    default: "30"
  run:
    description: "Command to run"
    required: true
  shell:
    description: "Shell to use (bash or python)"
    required: false
    default: "bash"

runs:
  using: "composite"
  steps:
    - name: Create retry script
      shell: bash
      run: |
        # Create Python retry script
        cat > ${{ github.action_path }}/retry.py << 'EOL'
        import sys
        import time
        import subprocess
        
        def run_command():
            timeout_minutes = int(sys.argv[1])
            max_attempts = int(sys.argv[2])
            retry_delay = int(sys.argv[3])
            command = ' '.join(sys.argv[4:])
            
            start_time = time.time()
            timeout_seconds = timeout_minutes * 60
            attempt = 1
            
            while True:
                if attempt > 1:
                    print(f"::group::Attempt {attempt} of {max_attempts}")
                
                current_time = time.time()
                if (current_time - start_time) > timeout_seconds:
                    print(f"::error::Step timed out after {timeout_minutes} minutes")
                    sys.exit(1)
                
                try:
                    subprocess.run(command, shell=True, check=True)
                    if attempt > 1:
                        print("::endgroup::")
                    sys.exit(0)
                except subprocess.CalledProcessError as e:
                    if attempt > 1:
                        print(f"Attempt {attempt} failed with exit code {e.returncode}")
                        print("::endgroup::")
                    
                    if attempt >= max_attempts:
                        print(f"::error::Step failed after {attempt} attempts")
                        sys.exit(e.returncode)
                    
                    print(f"Retrying in {retry_delay} seconds...")
                    time.sleep(retry_delay)
                    attempt += 1
        
        if __name__ == "__main__":
            run_command()
        EOL
        
        # Create bash retry script
        cat > ${{ github.action_path }}/retry.sh << 'EOL'
        #!/bin/bash
        
        timeout_minutes=$1
        max_attempts=$2
        retry_delay=$3
        shift 3
        command="$*"
        
        start_time=$(date +%s)
        timeout_seconds=$((timeout_minutes * 60))
        attempt=1
        
        while true; do
            if [ $attempt -gt 1 ]; then
                echo "::group::Attempt $attempt of $max_attempts"
            fi
            
            current_time=$(date +%s)
            if [ $((current_time - start_time)) -gt $timeout_seconds ]; then
                echo "::error::Step timed out after $timeout_minutes minutes"
                exit 1
            fi
            
            set +e
            (
                set -e
                eval "$command"
            )
            exit_code=$?
            set -e
            
            if [ $exit_code -eq 0 ]; then
                [ $attempt -gt 1 ] && echo "::endgroup::"
                exit 0
            fi
            
            if [ $attempt -gt 1 ]; then
                echo "Attempt $attempt failed with exit code $exit_code"
                echo "::endgroup::"
            fi
            
            if [ $attempt -ge $max_attempts ]; then
                echo "::error::Step failed after $attempt attempts"
                exit $exit_code
            fi
            
            echo "Retrying in $retry_delay seconds..."
            sleep "$retry_delay"
            attempt=$((attempt + 1))
        done
        EOL
        chmod +x ${{ github.action_path }}/retry.sh

    - name: Execute with retry
      shell: ${{ inputs.shell }}
      env: ${{ env }}
      run: |
        if [ "${{ inputs.shell }}" = "python" ]; then
          python ${{ github.action_path }}/retry.py "${{ inputs.timeout_minutes }}" "${{ inputs.max_attempts }}" "${{ inputs.retry_delay }}" "${{ inputs.run }}"
        else
          ${{ github.action_path }}/retry.sh "${{ inputs.timeout_minutes }}" "${{ inputs.max_attempts }}" "${{ inputs.retry_delay }}" "${{ inputs.run }}"
        fi
