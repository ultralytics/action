# Ultralytics Actions ðŸš€, AGPL-3.0 License https://ultralytics.com/license

name: "Step-Level Retry"
description: "Retries a step while preserving its full context"
inputs:
  timeout_minutes:
    description: "Maximum time in minutes for each attempt"
    required: false
    default: "60"
  max_attempts:
    description: "Maximum number of retry attempts"
    required: false
    default: "3"
  retry_delay:
    description: "Delay between retries in seconds"
    required: false
    default: "30"
  run:
    description: "Command to run"
    required: true
  shell:
    description: "Shell to use (bash or python)"
    required: false
    default: "bash"

runs:
  using: "composite"
  steps:
    - name: Execute with retry (Python)
      if: inputs.shell == 'python'
      shell: python
      env: ${{ env }}
      run: |
        import time

        start_time = time.time()
        timeout_seconds = ${{ inputs.timeout_minutes }} * 60
        attempt = 1

        while True:
            if attempt > 1:
                print(f"::group::Attempt {attempt} of ${{ inputs.max_attempts }}")
            
            if (time.time() - start_time) > timeout_seconds:
                print(f"::error::Step timed out after ${{ inputs.timeout_minutes }} minutes")
                exit(1)
            
            try:
                ${{ inputs.run }}
                if attempt > 1:
                    print("::endgroup::")
                exit(0)
            except Exception as e:
                if attempt > 1:
                    print(f"Attempt {attempt} failed with error: {str(e)}")
                    print("::endgroup::")
                
                if attempt >= ${{ inputs.max_attempts }}:
                    print(f"::error::Step failed after {attempt} attempts")
                    exit(1)
                
                print(f"Retrying in ${{ inputs.retry_delay }} seconds...")
                time.sleep(${{ inputs.retry_delay }})
                attempt += 1

    - name: Execute with retry (Bash)
      if: inputs.shell != 'python'
      shell: bash
      env: ${{ env }}
      run: |
        function retry_command {
            local start_time=$(date +%s)
            local timeout_seconds=$(( ${{ inputs.timeout_minutes }} * 60 ))
            local attempt=1
            
            while true; do
                if [ $attempt -gt 1 ]; then
                    echo "::group::Attempt $attempt of ${{ inputs.max_attempts }}"
                fi
                
                local current_time=$(date +%s)
                if [ $((current_time - start_time)) -gt $timeout_seconds ]; then
                    echo "::error::Step timed out after ${{ inputs.timeout_minutes }} minutes"
                    return 1
                fi
                
                set +e
                (
                    set -e
                    ${{ inputs.run }}
                )
                local exit_code=$?
                set -e
                
                if [ $exit_code -eq 0 ]; then
                    [ $attempt -gt 1 ] && echo "::endgroup::"
                    return 0
                fi
                
                if [ $attempt -gt 1 ]; then
                    echo "Attempt $attempt failed with exit code $exit_code"
                    echo "::endgroup::"
                fi
                
                if [ $attempt -ge ${{ inputs.max_attempts }} ]; then
                    echo "::error::Step failed after $attempt attempts"
                    return $exit_code
                fi
                
                echo "Retrying in ${{ inputs.retry_delay }} seconds..."
                sleep ${{ inputs.retry_delay }}
                attempt=$((attempt + 1))
            done
        }

        retry_command
