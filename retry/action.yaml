# Ultralytics Actions 🚀, AGPL-3.0 License https://ultralytics.com/license
#
# Example usage:
#
# Basic usage (will retry failed step 3 times):
# steps:
#   - uses: ultralytics/actions/retry@main
#     with:
#       run: python train.py
#
# Advanced usage:
# steps:
#   - uses: ultralytics/actions/retry@main
#     with:
#       run: |
#         python setup.py install
#         pytest tests/
#       retries: 2             # Retry twice after initial attempt (3 total runs)
#       timeout_minutes: 30    # Each attempt times out after 30 minutes
#       retry_delay_seconds: 60 # Wait 60 seconds between retries
#       shell: bash            # Use python or bash shell

name: "Step-Level Retry"
description: "Retries a step while preserving its full context"
inputs:
  timeout_minutes:
    description: "Maximum time in minutes for each attempt"
    required: false
    default: "60"
  retries:
    description: "Number of retry attempts after initial run"
    required: false
    default: "3"
  retry_delay_seconds:
    description: "Delay between retries in seconds"
    required: false
    default: "30"
  run:
    description: "Command to run"
    required: true
  shell:
    description: "Shell to use (bash or python)"
    required: false
    default: "bash"

runs:
  using: "composite"
  steps:
    - name: Execute with retry (Python)
      if: inputs.shell == 'python'
      shell: python
      env: ${{ env }}
      run: |
        import time
        start_time = time.time()
        timeout_seconds = ${{ inputs.timeout_minutes }} * 60
        attempt = 1
        max_attempts = 1 + ${{ inputs.retries }}  # Initial run + retries

        while True:
            if attempt > 1:
                print(f"::group::Retry {attempt-1} of ${{ inputs.retries }}")
            
            if (time.time() - start_time) > timeout_seconds:
                print(f"::error::Step timed out after ${{ inputs.timeout_minutes }} minutes")
                exit(1)
            
            try:
                ${{ inputs.run }}
                if attempt > 1:
                    print("::endgroup::")
                exit(0)
            except Exception as e:
                if attempt > 1:
                    print(f"Retry {attempt-1} failed with error: {str(e)}")
                    print("::endgroup::")
                else:
                    print(f"Initial attempt failed with error: {str(e)}")
                
                if attempt >= max_attempts:
                    print(f"::error::Step failed after initial attempt and {attempt-1} retries")
                    exit(1)
                
                print(f"Retrying in ${{ inputs.retry_delay_seconds }} seconds...")
                time.sleep(${{ inputs.retry_delay_seconds }})
                attempt += 1

    - name: Execute with retry (Bash)
      if: inputs.shell != 'python'
      shell: bash
      env: ${{ env }}
      run: |
        function write_output() {
          echo -e "$1" >> $GITHUB_STEP_SUMMARY
        }

        start_time=$(date +%s)
        env_file=$(mktemp)
        cmd_file=$(mktemp)
        max_attempts=$((${{ inputs.retries }} + 1))
        attempt=0
        
        # Write command to file
        cat > "$cmd_file" << 'EOL'
${{ inputs.run }}
EOL
        
        # Main retry loop
        while [ $attempt -lt $max_attempts ]; do
          [ $attempt -gt 0 ] && echo "::group::Retry $attempt of ${{ inputs.retries }}"
          
          # Check timeout
          current_time=$(date +%s)
          if [ $((current_time - start_time)) -gt $((${{ inputs.timeout_minutes }} * 60)) ]; then
            write_output "\n\n### ❌ Error\nStep timed out after ${{ inputs.timeout_minutes }} minutes"
            rm -f "$cmd_file" "$env_file"
            exit 1
          fi
          
          # Execute command
          {
            source "$cmd_file"
          } > >(tee "$env_file") 2>&1
          exit_code=$?
          
          # Get output
          if [ -f "$env_file" ]; then
            output=$(cat "$env_file")
            write_output "\n$output"
          fi
          
          # Check success
          if [ $exit_code -eq 0 ]; then
            # Process any environment variables
            if [ -f "$env_file" ]; then
              while IFS= read -r line || [ -n "$line" ]; do
                if [[ "$line" =~ ^[A-Za-z_][A-Za-z0-9_]*= ]]; then
                  echo "::set-env name=${line%%=*}::${line#*=}"
                fi
              done < "$env_file"
            fi
            [ $attempt -gt 0 ] && echo "::endgroup::"
            rm -f "$cmd_file" "$env_file"
            exit 0
          fi
          
          # Check if this was the last attempt
          if [ $attempt -eq $((max_attempts - 1)) ]; then
            write_output "\n\n### ❌ Error\nFinal error after $((attempt + 1)) attempts:\n\`\`\`\n$output\n\`\`\`"
            rm -f "$cmd_file" "$env_file"
            exit $exit_code
          fi
          
          echo "Retrying in ${{ inputs.retry_delay_seconds }} seconds..."
          sleep ${{ inputs.retry_delay_seconds }}
          attempt=$((attempt + 1))
        done
