# Ultralytics Actions ðŸš€, AGPL-3.0 License https://ultralytics.com/license

name: "Step-Level Retry"
description: "Retries a step while preserving its full context"

inputs:
  timeout_minutes:
    description: "Maximum time in minutes for each attempt"
    required: false
    default: "60"
  max_attempts:
    description: "Maximum number of retry attempts"
    required: false
    default: "3"
  retry_delay:
    description: "Delay between retries in seconds"
    required: false
    default: "30"
  run:
    description: "Command to run"
    required: true
  working-directory:
    description: "Working directory for the command"
    required: false
    default: "."

runs:
  using: "composite"
  steps:
    - name: Execute with retry
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      env: ${{ env }}
      run: |

        start_time=$(date +%s)
        timeout_seconds=$(( ${{ inputs.timeout_minutes }} * 60 ))
        attempt=1

        while true; do
          echo "::group::Attempt $attempt of ${{ inputs.max_attempts }}"
          
          # Check timeout
          current_time=$(date +%s)
          if [ $((current_time - start_time)) -gt $timeout_seconds ]; then
            echo "::error::Step timed out after ${{ inputs.timeout_minutes }} minutes"
            exit 1
          fi
          
          # Execute command
          set +e
          (
            set -e
            ${{ inputs.run }}
          )
          exit_code=$?
          set -e
          
          if [ $exit_code -eq 0 ]; then
            echo "::endgroup::"
            exit 0
          fi
          
          echo "Attempt $attempt failed with exit code $exit_code"
          echo "::endgroup::"
          
          if [ $attempt -ge ${{ inputs.max_attempts }} ]; then
            echo "::error::Step failed after $attempt attempts"
            exit $exit_code
          fi
          
          echo "Retrying in ${{ inputs.retry_delay }} seconds..."
          sleep ${{ inputs.retry_delay }}
          attempt=$((attempt + 1))
        done
