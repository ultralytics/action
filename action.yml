name: 'Ultralytics Formatting Action'
author: 'Ultralytics'
description: 'Formats Python code and checks spelling'
branding:
  icon: 'code'
  color: 'blue'
inputs:
  github-token:
    description: 'GitHub token'
    required: true
  python:
    description: 'Run Python formatting'
    required: false
    default: 'false'
  docstrings:
    description: 'Run Docstrings formatting'
    required: false
    default: 'false'
  markdown:
    description: 'Run Markdown formatting'
    required: false
    default: 'false'
  spelling:
    description: 'Run Spelling checks'
    required: false
    default: 'false'
runs:
  using: 'composite'
  steps:

    - name: Print Action Information
      run: |
        echo "Event Name: ${{ github.event_name }}"
        echo "Repository: ${{ github.repository }}"
        echo "Actor: ${{ github.actor }}"
        echo "Workflow: ${{ github.workflow }}"
        echo "Action Ref: ${{ github.action_ref }}"
        echo "Action Repository: ${{ github.action_repository }}"
        echo "Event Path: ${{ github.event_path }}"
        echo "SHA: ${{ github.sha }}"
        echo "Ref: ${{ github.ref }}"
        echo "Head Ref: ${{ github.head_ref }}"
        echo "Base Ref: ${{ github.base_ref }}"
      shell: bash

    - name: Print Fork Repository Information
      if: github.event_name == 'pull_request'
      run: |
        echo "Fork Repository: ${{ github.event.pull_request.head.repo.full_name }}"
        echo "Fork Repo Clone URL: ${{ github.event.pull_request.head.repo.clone_url }}"
      shell: bash
    
    - name: Checkout Repository for Push Events
      if: github.event_name == 'push'
      uses: actions/checkout@v4
      with:
        ref: ${{ github.ref }}
        fetch-depth: 0
    
    - name: Checkout Repository for Pull Request Events
      if: github.event_name == 'pull_request' || github.event_name == 'pull_request_target'
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.ref }}
        fetch-depth: 0

    - name: Install Dependencies
      # tomli required for codespell with pyproject.toml
      run: |
        pip install --no-cache -q ruff docformatter mdformat-gfm codespell tomli
      shell: bash

    # Python formatting ------------------------------------------------------------------------------------------------
    - name: Run Ruff
      if: inputs.python == 'true'
      run: |
        ruff format . --line-length 120 || true
      shell: bash

    # Docstrings formatting --------------------------------------------------------------------------------------------
    - name: Run Docformatter
      if: inputs.docstrings == 'true'
      run: |
        docformatter --wrap-summaries 120 \
                     --wrap-descriptions 120 \
                     --in-place \
                     --pre-summary-newline \
                     --close-quotes-on-newline \
                     -r . || true
      shell: bash

    # Markdown formatting ----------------------------------------------------------------------------------------------
    - name: Run Mdformat
      if: inputs.markdown == 'true'
      run: |
        mdformat . --number --wrap no || true
      shell: bash

    # Spelling ---------------------------------------------------------------------------------------------------------
    - name: Run Codespell
      if: inputs.spelling == 'true'
      run: |
        codespell \
          -w \
          --ignore-words-list "crate,nd,strack,dota,ane,segway,fo,gool,winn,commend" \
          --skip '*.csv,*venv*,docs/??/,docs/mkdocs_??.yml' || true
      shell: bash

    - name: Commit and Push Changes
      run: |
        git add -A
        if ! git diff --staged --quiet; then
          git config --global user.name "UltralyticsAssistant"
          git config --global user.email "web@ultralytics.com"
          git commit -m "Auto-format by Ultralytics actions"
          git push origin $BRANCH
        else
          echo "No changes to commit"
        fi
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
