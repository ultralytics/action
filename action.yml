name: 'Ultralytics Formatting Action'
author: 'Ultralytics'
description: 'Formats Python code and checks spelling'
branding:
  icon: 'code'
  color: 'blue'
inputs:
  token:
    description: 'GitHub token'
    required: true
  python:
    description: 'Run Python formatting'
    required: false
    default: 'false'
  docstrings:
    description: 'Run Docstrings formatting'
    required: false
    default: 'false'
  markdown:
    description: 'Run Markdown formatting'
    required: false
    default: 'false'
  spelling:
    description: 'Run Spelling checks'
    required: false
    default: 'false'
  links:
    description: 'Run Broken Links checks'
    required: false
    default: 'false'
runs:
  using: 'composite'
  steps:

    - name: Print Action Information
      run: |
        echo "github.event_name: ${{ github.event_name }}"
        echo "github.repository: ${{ github.repository }}"
        echo "github.event.pull_request.head.repo.full_name: ${{ github.event.pull_request.head.repo.full_name }}"
        echo "github.actor: ${{ github.actor }}"
        echo "github.event.pull_request.head.ref: ${{ github.event.pull_request.head.ref }}"
        echo "github.ref: ${{ github.ref }}"
        echo "github.head_ref: ${{ github.head_ref }}"
        echo "github.base_ref: ${{ github.base_ref }}"
      shell: bash

    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        repository: ${{ github.event.pull_request.head.repo.full_name || github.repository }}
        token: ${{ inputs.token }}
        ref: ${{ github.head_ref || github.ref }}
        fetch-depth: 0

    - name: Install Dependencies
      # tomli required for codespell with pyproject.toml
      run: |
        pip install --no-cache -q ruff docformatter mdformat-gfm mdformat-frontmatter mdformat-mkdocs codespell tomli
      shell: bash

    # Python formatting ------------------------------------------------------------------------------------------------
    - name: Run Ruff
      if: inputs.python == 'true'
      run: |
        ruff format . --line-length 120
      shell: bash
      continue-on-error: true

    # Docstrings formatting --------------------------------------------------------------------------------------------
    - name: Run Docformatter
      if: inputs.docstrings == 'true'
      run: |
        docformatter --wrap-summaries 120 \
                     --wrap-descriptions 120 \
                     --in-place \
                     --pre-summary-newline \
                     --close-quotes-on-newline \
                     -r .
      shell: bash
      continue-on-error: true

    # Markdown formatting ----------------------------------------------------------------------------------------------
    - name: Run Mdformat
      if: inputs.markdown == 'true'
      run: |
        mdformat . --number --wrap no
      shell: bash
      continue-on-error: true

    # Spelling ---------------------------------------------------------------------------------------------------------
    - name: Run Codespell
      if: inputs.spelling == 'true'
      run: |
        codespell \
          -w \
          --ignore-words-list "crate,nd,ned,strack,dota,ane,segway,fo,gool,winn,commend,bloc,nam,afterall" \
          --skip '*.csv,*.onnx,*.pt,*venv*,./docs/??/,./docs/mkdocs_??.yml'
      shell: bash
      continue-on-error: true

    # Commit Changes ---------------------------------------------------------------------------------------------------
    - name: Commit and Push Changes
      run: |
        git add -A
        if ! git diff --staged --quiet; then
          git config --global user.name "UltralyticsAssistant"
          git config --global user.email "web@ultralytics.com"
          git commit -m "Auto-format by Ultralytics actions"
          git push
        else
          echo "No changes to commit"
        fi
      shell: bash
      continue-on-error: false

    # Broken links -----------------------------------------------------------------------------------------------------
    - name: Broken Link Checker
      if: inputs.links == 'true'
      uses: lycheeverse/lychee-action@v1.9.0
      with:
        # Check all markdown and html files in repo (default)
        # Ignores the following status codes to reduce false positives:
        #   - 403(OpenVINO, 'forbidden')
        #   - 429(Instagram, 'too many requests')
        #   - 500(Zenodo, 'cached')
        #   - 502(Zenodo, 'bad gateway')
        #   - 999(LinkedIn, 'unknown status code')
        args: |
          --accept 403,429,500,502,999
          --exclude-loopback
          --exclude 'https?://(www\.)?(github\.com|linkedin\.com|twitter\.com|instagram\.com|kaggle\.com|fonts\.gstatic\.com|url\.com)'
          --scheme https
          './**/*.md'
          './**/*.html'
        token: ${{ inputs.token }}
        output: ../lychee/results.md
        fail: true
      continue-on-error: false

